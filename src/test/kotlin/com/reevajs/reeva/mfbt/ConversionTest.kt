package com.reevajs.reeva.mfbt

import com.reevajs.reeva.mfbt.impl.EDouble
import org.junit.jupiter.api.Test
import strikt.api.expectThat
import strikt.assertions.isA
import strikt.assertions.isEqualTo

class ConversionTest {
    @Test
    fun toShortest() {
        val builder = StringBuilder()

        fun doTest(number: Double, expected: String) {
            builder.clear()
            val result = Dtoa.toShortest(number)
            expectThat(result).isA<String>().isEqualTo(expected)
        }

        doTest(EDouble.nan(), "NaN")
        doTest(EDouble.infinity(), "Infinity")
        doTest(-EDouble.infinity(), "-Infinity")
        doTest(0.0, "0")
        doTest(9.0, "9")
        doTest(90.0, "90")
        doTest(90.12, "90.12")
        doTest(0.1, "0.1")
        doTest(0.01, "0.01")
        doTest(0.0123, "0.0123")
        doTest(111111111111111111111.0, "111111111111111110000")
        doTest(100000000000000000000.0, "100000000000000000000")
        doTest(1111111111111111111111.0, "1.1111111111111111e+21")
        doTest(11111111111111111111111.0, "1.1111111111111111e+22")
        doTest(0.00001, "0.00001")
        doTest(0.000001, "0.000001")
        doTest(0.0000001, "1e-7")
        doTest(0.00000012, "1.2e-7")
        doTest(0.000000123, "1.23e-7")
        doTest(0.00000001, "1e-8")
        doTest(0.000000012, "1.2e-8")
        doTest(0.000000012, "1.2e-8")
        doTest(0.0000000123, "1.23e-8")
        doTest(-0.0, "0")
        doTest(-9.0, "-9")
        doTest(-90.0, "-90")
        doTest(-90.12, "-90.12")
        doTest(-0.1, "-0.1")
        doTest(-0.01, "-0.01")
        doTest(-0.0123, "-0.0123")
        doTest(-111111111111111111111.0, "-111111111111111110000")
        doTest(-1111111111111111111111.0, "-1.1111111111111111e+21")
        doTest(-11111111111111111111111.0, "-1.1111111111111111e+22")
        doTest(-0.00001, "-0.00001")
        doTest(-0.000001, "-0.000001")
        doTest(-0.0000001, "-1e-7")
        doTest(-0.00000012, "-1.2e-7")
        doTest(-0.000000123, "-1.23e-7")
        doTest(-0.00000001, "-1e-8")
        doTest(-0.000000012, "-1.2e-8")
        doTest(-0.000000012, "-1.2e-8")
        doTest(-0.0000000123, "-1.23e-8")
    }

    @Test
    fun toFixed() {
        val builder = StringBuilder()

        fun doTest(number: Double, requestedDigits: Int, expected: String) {
            builder.clear()
            val result = Dtoa.toFixed(number, requestedDigits)
            expectThat(result).isA<String>().isEqualTo(expected)
        }

        doTest(EDouble.nan(), 2, "NaN")
        doTest(EDouble.infinity(), 2, "Infinity")
        doTest(-EDouble.infinity(), 2, "-Infinity")
        doTest(-0.1, 1, "-0.1")
        doTest(-0.1, 2, "-0.10")
        doTest(-0.1, 3, "-0.100")
        doTest(-0.01, 2, "-0.01")
        doTest(-0.01, 3, "-0.010")
        doTest(-0.01, 4, "-0.0100")
        doTest(-0.001, 2, "-0.00")
        doTest(-0.001, 3, "-0.001")
        doTest(-0.001, 4, "-0.0010")
        doTest(-1.0, 4, "-1.0000")
        doTest(-1.0, 1, "-1.0")
        doTest(-1.0, 0, "-1")
        doTest(-12.0, 0, "-12")
        doTest(-1.1, 0, "-1")
        doTest(-12.1, 0, "-12")
        doTest(-1.12, 0, "-1")
        doTest(-12.12, 0, "-12")
        doTest(-0.0000006, 7, "-0.0000006")
        doTest(-0.00000006, 8, "-0.00000006")
        doTest(-0.00000006, 9, "-0.000000060")
        doTest(-0.00000006, 10, "-0.0000000600")
        doTest(-0.0, 0, "0")
        doTest(-0.0, 1, "0.0")
        doTest(-0.0, 2, "0.00")
        doTest(1000.0, 0, "1000")
        doTest(0.00001, 0, "0")
        doTest(0.00001, 5, "0.00001")
        doTest(0.0000000000000000001, 20, "0.00000000000000000010")
        doTest(0.00001, 17, "0.00001000000000000")
        doTest(1000000000000000128.0, 0, "1000000000000000128")
        doTest(1000000000000000128.0, 1, "1000000000000000128.0")
        doTest(1000000000000000128.0, 2, "1000000000000000128.00")
        doTest(1000000000000000128.0, 20, "1000000000000000128.00000000000000000000")
        doTest(0.0, 0, "0")
        doTest(-42.0, 3, "-42.000")
        doTest(-1000000000000000128.0, 0, "-1000000000000000128")
        doTest(-0.0000000000000000001, 20, "-0.00000000000000000010")
        doTest(0.123123123123123, 20, "0.12312312312312299889")
        doTest(0.5, 0, "1")
        doTest(-0.5, 0, "-1")
        doTest(1.25, 1, "1.3")
        doTest(234.20405, 4, "234.2040")
        doTest(234.2040506, 4, "234.2041")
    }

    @Test
    fun toExponential() {
        val builder = StringBuilder()

        fun doTest(number: Double, requestedDigits: Int, expected: String) {
            builder.clear()
            val result = Dtoa.toExponential(number, requestedDigits)
            expectThat(result).isA<String>().isEqualTo(expected)
        }

        doTest(1.0, -1, "1e+0")
        doTest(11.0, -1, "1.1e+1")
        doTest(112.0, -1, "1.12e+2")
        doTest(1.0, 0, "1e+0")
        doTest(11.0, 0, "1e+1")
        doTest(112.0, 0, "1e+2")
        doTest(1.0, 1, "1.0e+0")
        doTest(11.0, 1, "1.1e+1")
        doTest(112.0, 1, "1.1e+2")
        doTest(1.0, 2, "1.00e+0")
        doTest(11.0, 2, "1.10e+1")
        doTest(112.0, 2, "1.12e+2")
        doTest(1.0, 3, "1.000e+0")
        doTest(11.0, 3, "1.100e+1")
        doTest(112.0, 3, "1.120e+2")
        doTest(0.1, -1, "1e-1")
        doTest(0.11, -1, "1.1e-1")
        doTest(0.112, -1, "1.12e-1")
        doTest(0.1, 0, "1e-1")
        doTest(0.11, 0, "1e-1")
        doTest(0.112, 0, "1e-1")
        doTest(0.1, 1, "1.0e-1")
        doTest(0.11, 1, "1.1e-1")
        doTest(0.112, 1, "1.1e-1")
        doTest(0.1, 2, "1.00e-1")
        doTest(0.11, 2, "1.10e-1")
        doTest(0.112, 2, "1.12e-1")
        doTest(0.1, 3, "1.000e-1")
        doTest(0.11, 3, "1.100e-1")
        doTest(0.112, 3, "1.120e-1")
        doTest(-1.0, -1, "-1e+0")
        doTest(-11.0, -1, "-1.1e+1")
        doTest(-112.0, -1, "-1.12e+2")
        doTest(-1.0, 0, "-1e+0")
        doTest(-11.0, 0, "-1e+1")
        doTest(-112.0, 0, "-1e+2")
        doTest(-1.0, 1, "-1.0e+0")
        doTest(-11.0, 1, "-1.1e+1")
        doTest(-112.0, 1, "-1.1e+2")
        doTest(-1.0, 2, "-1.00e+0")
        doTest(-11.0, 2, "-1.10e+1")
        doTest(-112.0, 2, "-1.12e+2")
        doTest(-1.0, 3, "-1.000e+0")
        doTest(-11.0, 3, "-1.100e+1")
        doTest(-112.0, 3, "-1.120e+2")
        doTest(-0.1, -1, "-1e-1")
        doTest(-0.11, -1, "-1.1e-1")
        doTest(-0.112, -1, "-1.12e-1")
        doTest(-0.1, 0, "-1e-1")
        doTest(-0.11, 0, "-1e-1")
        doTest(-0.112, 0, "-1e-1")
        doTest(-0.1, 1, "-1.0e-1")
        doTest(-0.11, 1, "-1.1e-1")
        doTest(-0.112, 1, "-1.1e-1")
        doTest(-0.1, 2, "-1.00e-1")
        doTest(-0.11, 2, "-1.10e-1")
        doTest(-0.112, 2, "-1.12e-1")
        doTest(-0.1, 3, "-1.000e-1")
        doTest(-0.11, 3, "-1.100e-1")
        doTest(-0.112, 3, "-1.120e-1")
        doTest(EDouble.nan(), 2, "NaN")
        doTest(EDouble.infinity(), 2, "Infinity")
        doTest(-EDouble.infinity(), 2, "-Infinity")
        doTest(1.0, 0, "1e+0")
        doTest(0.0, -1, "0e+0")
        doTest(0.0, 2, "0.00e+0")
        doTest(11.2356, 0, "1e+1")
        doTest(11.2356, 4, "1.1236e+1")
        doTest(0.000112356, 4, "1.1236e-4")
        doTest(-0.000112356, 4, "-1.1236e-4")
        doTest(0.000112356, -1, "1.12356e-4")
        doTest(-0.000112356, -1, "-1.12356e-4")
    }

    @Test
    fun toPrecision() {
        val builder = StringBuilder()

        fun doTest(number: Double, precision: Int, expected: String) {
            builder.clear()
            val result = Dtoa.toPrecision(number, precision)
            expectThat(result).isA<String>().isEqualTo(expected)
        }

        doTest(EDouble.nan(), 1, "NaN")
        doTest(EDouble.infinity(), 2, "Infinity")
        doTest(-EDouble.infinity(), 2, "-Infinity")
        doTest(0.000555, 15, "0.000555000000000000")
        doTest(0.000000555, 15, "5.55000000000000e-7")
        doTest(-0.000000555, 15, "-5.55000000000000e-7")
        doTest(123456789.0, 1, "1e+8")
        doTest(123456789.0, 9, "123456789")
        doTest(123456789.0, 8, "1.2345679e+8")
        doTest(123456789.0, 7, "1.234568e+8")
        doTest(-123456789.0, 7, "-1.234568e+8")
        doTest(-.0000000012345, 2, "-1.2e-9")
        doTest(-.000000012345, 2, "-1.2e-8")
        doTest(-.00000012345, 2, "-1.2e-7")
        doTest(-.0000012345, 2, "-0.0000012")
        doTest(-.000012345, 2, "-0.000012")
        doTest(-.00012345, 2, "-0.00012")
        doTest(-.0012345, 2, "-0.0012")
        doTest(-.012345, 2, "-0.012")
        doTest(-.12345, 2, "-0.12")
        doTest(-1.2345, 2, "-1.2")
        doTest(-12.345, 2, "-12")
        doTest(-123.45, 2, "-1.2e+2")
        doTest(-1234.5, 2, "-1.2e+3")
        doTest(-12345.0, 2, "-1.2e+4")
        doTest(-12345.67, 4, "-1.235e+4")
        doTest(-12344.67, 4, "-1.234e+4")
        doTest(1.25, 2, "1.3")
        doTest(1.35, 2, "1.4")
    }
}
